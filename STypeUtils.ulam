/**
   Static (stable?) type value that can be used
   to search for or build atoms.

   NOTE: we'll probably need groups of stypes later, so e.g.
   "agent" is a group of multiple stypes, and each stype is buildable.
   For now it's not clear what's actually required.
 */
transient STypeUtils + Fail {
  typedef EventWindow.SiteNum SiteNum;
  typedef Unsigned SType;

  constant SType cEMPTY    = 0;
  constant SType cDEFAULT  = 1;
  constant SType cAGENT    = 2;
  constant SType cPACKAGE  = 3;
  constant SType cMEMBRANE = 4;

  AtomUtils au;
  EventWindow ew;

  SType getSType(SiteNum site) {
    return getSType(ew[site]);
  }

  SType getSType(C2D coord) {
    return getSType(ew[coord]);
  }

  SType getSType(Atom& atom) {
    if (au.isEmpty(atom))
      return cEMPTY;
    if (atom is QAgent)
      return cAGENT;
    if (atom is Package)
      return cPACKAGE;
    if (atom is Membrane)
      return cMEMBRANE;

    return cDEFAULT;
  }

  Atom make(SType stype) {
    if (stype == cAGENT) {
      fail("Cannot build atom of `agent' type");
    }
    if (stype == cPACKAGE) {
      Package atom;
      return atom;
    }
    if (stype == cMEMBRANE) {
      Membrane atom;
      return atom;
    }

    // keeping compiler happy by always returning something
    if (stype != cEMPTY)
      fail("unknown SType");
    Empty atom;
    return atom;
  }

  Unsigned getType(SType stype) {
    Atom atom = make(stype);
    return (Unsigned) au.getType(atom);
  }
}
