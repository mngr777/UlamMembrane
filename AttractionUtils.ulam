local typedef STypeUtils STU;

/**
   Calculates how much two atom are attracted/repulsed by each other.
 */
transient AttractionUtils {
  typedef Int Attraction;
  typedef STypeUtils.SType SType;

  EventWindow ew;
  STypeUtils stu;

  Attraction getAttraction(Atom& atom1, Atom& atom2) {
    SType type1 = stu.getSType(atom1);
    SType type2 = stu.getSType(atom2);
    if (type1 > type2) {
      SType tmp = type2;
      type2 = type1;
      type1 = tmp;
    }

    C2D coord1 = ew.getCoordRaw(ew.getSiteNumber(atom1));
    C2D coord2 = ew.getCoordRaw(ew.getSiteNumber(atom2));
    Unsigned distance = coord1.manhattanDistance(coord2);

    // NOTE:
    // * this can explode quickly, but then we can then use
    //   more broad categories of atoms including multiple stypes
    // * the numbers are made up


    if (type1 == STU.cDEFAULT) {

    } else if (type1 == STU.cPACKAGE) {
      if (type2 == STU.cMEMBRANE)
        return getMembraneAttractionAt(distance);

    } else if (type1 == STU.cMEMBRANE) {
      if (type2 == STU.cMEMBRANE) {
        Membrane& membrane1 = (Membrane&) atom1;
        Membrane& membrane2 = (Membrane&) atom2;
        if (!membrane1.hasPrevAndNext() || !membrane2.hasPrevAndNext())
          return 0; // membrane atom not yet integrated, make it easier to connect

        if (distance < 2u)
          return -16;
        if (distance < 3u)
          return -8;

      } else if (type2 == STU.cTREE_BUILDER) {
        return getMembraneAttractionAt(distance);
      }
    }

    return 0;
  }

  Attraction getMembraneAttractionAt(Unsigned distance) {
    if (distance < 2u)
      return -16;
    if (distance < 3u)
      return -8;
    if (distance < 4u)
      return -4;
    return -2;
  }
}
