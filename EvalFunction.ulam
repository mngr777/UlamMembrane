local typedef EvalSearch ES;
local typedef EvalStatefulFunction ESF;
local typedef BondUtils BU;

transient EvalFunction : Eval {
  constant Symbol cSET_1                = 0x01;
  constant Symbol cSET_2                = 0x02;
  constant Symbol cSET_SRC              = 0x03;
  constant Symbol cSET_DST              = 0x04;
  constant Symbol cGET_1                = 0x05;
  constant Symbol cGET_2                = 0x06;
  constant Symbol cGET_SRC              = 0x07;
  constant Symbol cGET_DST              = 0x08;

  constant Symbol cNOOP                 = 0x11;
  constant Symbol cPROG2                = 0x12;

  constant Symbol cSWAP_INPUT_OUTPUT    = 0x13;

  constant Symbol cATTACH_TO            = 0x21;
  constant Symbol cATTACH_TO_FLAGS      = 0x22;
  constant Symbol cDETACH               = 0x23;
  constant Symbol cDETACH_OTHER         = 0x24;

  constant Symbol cATTACH_OTHER_TO_NEXT = 0x25;
  constant Symbol cCONNECT_OTHER_FORCE  = 0x26;

  constant Symbol cTRAVERSE             = 0x27;
  constant Symbol cTRAVERSE_1           = 0x28;
  constant Symbol cTRAVERSE_2           = 0x29;
  constant Symbol cTRAVERSE_3           = 0x2a;

  constant Symbol cBUILD                = 0x2b;
  constant Symbol cBUILD_NEXT           = 0x2c;
  constant Symbol cMOVE_TO_OTHER        = 0x2d;

  Arity getArity(Symbol symbol) {
    return getArgNum(symbol);
  }

  Arity getArgNum(Symbol symbol) {
    if (symbol == cPROG2 ||
        symbol == cBUILD ||
        symbol == cBUILD_NEXT)
    {
      return 2;
    }

    if (symbol == cSET_1 ||
        symbol == cSET_2 ||
        symbol == cSET_SRC ||
        symbol == cSET_DST ||
        symbol == cATTACH_TO ||
        symbol == cCONNECT_OTHER_FORCE ||
        symbol == cMOVE_TO_OTHER)
    {
      return 1;
    }

    return 0;
  }

  Byte eval(Exec& exec, Symbol symbol, Byte arg1, Byte arg2) {
    if (symbol == cSET_1) {
      if (cDEBUG) dbg.print("(set-1)");
      exec.set(cREG1, arg1);

    } else if (symbol == cSET_2) {
      if (cDEBUG) dbg.print("(set-2)");
      exec.set(cREG2, arg1);

    } else if (symbol == cSET_SRC) {
      if (cDEBUG) dbg.print("(set-src)");
      exec.set(cSRC, arg1);

    } else if (symbol == cSET_DST) {
      if (cDEBUG) dbg.print("(set-dst)");
      exec.set(cDST, arg1);

    } else if (symbol == cGET_1) {
      if (cDEBUG) dbg.print("(get-1)");
      return exec.get(cREG1);

    } else if (symbol == cGET_2) {
      if (cDEBUG) dbg.print("(get-2)");
      return exec.get(cREG2);

    } else if (symbol == cGET_SRC) {
      if (cDEBUG) dbg.print("(get-src)");
      return exec.get(cSRC);

    } else if (symbol == cGET_DST) {
      if (cDEBUG) dbg.print("(get-dst)");
      return exec.get(cDST);

    } else if (symbol == cNOOP) {
      if (cDEBUG) dbg.print("(noop)");
      // do nothing

    } else if (symbol == cPROG2) {
      // no debug output
      return arg2;

    } else if (symbol == cSWAP_INPUT_OUTPUT) {
      return bs.isOk(bu.swap(0, Exec.cINPUT, Exec.cOUTPUT));

    } else if (symbol == cATTACH_TO) {
      if (cDEBUG) dbg.print("(attach-to)");
      return (Byte) attach(exec, findSType(exec, (SType) arg1));

    } else if (symbol == cATTACH_TO_FLAGS) {
      if (cDEBUG) dbg.print("(attach-to-flags)");
      return (Byte) attach(exec, findSType(exec, (SType) arg1, arg2));

    } else if (symbol == cDETACH) {
      if (cDEBUG) dbg.print("(detach)");
      return (Byte) detach(exec);

    } else if (symbol == cDETACH_OTHER) {
      if (cDEBUG) dbg.print("(detach-other)");
      return (Byte) detachOther(exec);

    } else if (symbol == cATTACH_OTHER_TO_NEXT) {
      if (cDEBUG) dbg.print("(attach-other-to-next)");
      exec.setState(ESF.cSTATE_ATTACH_OTHER_TO_NEXT);

    } else if (symbol == cCONNECT_OTHER_FORCE) {
      if (cDEBUG) dbg.print("(connect-other-force)");
      exec.set(cREG1, arg1); // "other" (input/output, other than cSRC) bond index to attach
      exec.setState(ESF.cSTATE_CONNECT_OTHER_FORCE);

    } else if (symbol == cTRAVERSE) {
      if (cDEBUG) dbg.print("(traverse)");
      traverse(exec, getBondIndex(exec, cDST));

    } else if (symbol == cTRAVERSE_1) {
      if (cDEBUG) dbg.print("(traverse-1)");
      traverse(exec, 1);

    } else if (symbol == cTRAVERSE_2) {
      if (cDEBUG) dbg.print("(traverse-2)");
      traverse(exec, 2);

    } else if (symbol == cTRAVERSE_3) {
      if (cDEBUG) dbg.print("(traverse-3)");
      traverse(exec, 3);

    } else if (symbol == cBUILD) {
      if (cDEBUG) dbg.print("(build)");
      exec.set(cREG1, arg1); // stype
      exec.set(cDST, arg2);  // new atom bond to attach to
      exec.setState(ESF.cSTATE_BUILD);

    } else if (symbol == cBUILD_NEXT) {
      if (cDEBUG) dbg.print("(build-next)");
      exec.set(cREG1, arg1);
      exec.set(cREG2, arg2);
      exec.setState(ESF.cSTATE_BUILD_NEXT);

    } else if (symbol == cMOVE_TO_OTHER) {
      if (cDEBUG) dbg.print("(move-to-other)");
      // Move output atom to input or vice versa
      exec.set(cDST, arg1); // other atom bond index
      exec.setState(ESF.cSTATE_MOVE_TO_OTHER);

    } else {
      dbg.print("EvalFunction.eval: unknown symbol:");
      dbg.print((Unsigned) symbol);
    }

    return 0x0;
  }


  Bool attach(Exec& exec, SiteNum siteOther) {
    if (siteOther == 0u)
      return false;
    Index index = getBondIndex(exec, cSRC);
    bu.detach(0, index);
    return bs.isOk(bu.attach(0, index, siteOther, BU.cCOMMON));
  }

  Bool detach(Exec& exec) {
    Index index = getBondIndex(exec, cSRC);
    return bs.isOk(bu.detach(0, index));
  }

  Bool detachOther(Exec& exec) {
    Index index = getBondIndex(exec, cSRC);
    Index otherIndex = (index == Exec.cINPUT) ? Exec.cOUTPUT : Exec.cINPUT;
    return bs.isOk(bu.detach(0, otherIndex));
  }

  Void traverse(Exec& exec, Index indexNext) {
    exec.setInteger(cDST, indexNext);
    exec.setState(ESF.cSTATE_TRAVERSE);
  }

  SiteNum findSType(Exec& exec, SType type) {
    return findSType(exec, type, ES.cNO_FLAGS);
  }

  SiteNum findSType(Exec& exec, SType type, Byte flags) {
    Atom atom = stu.make(type);
    Radius radius = bu.maxDist((IBondable&) atom, exec);
    return findSTypeRadius(exec, type, radius, flags);
  }

  SiteNum findSTypeRadius(Exec& exec, SType type, Radius radius, Byte flags) {
    EvalSearch es;
    WindowServices ws;
    ws.reset(1u, radius);
    for (Int s = ws.next(); s >= 0; s = ws.next()) {
      SiteNum site = (SiteNum) s;
      if (stu.getSType(site) == type && es.match(site, flags))
        ws.hit();
    }
    SiteNum pick = ws.getPick();
    return (pick != SiteNum.maxof) ? pick : 0u;
  }
}
