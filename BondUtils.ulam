local typedef BondStatus BS;

transient BondUtils + Fail {
  typedef EventWindow.SiteNum SiteNum;
  typedef BondStatus.Status Status;
  typedef QBond.Index Index;

  constant QBond.Index cCOMMON = 0;

  BondStatus bs;
  EventWindow ew;

  WindowServices.Radius maxDist(IBondable& bondable1, IBondable& bondable2) {
    Unsigned dist1 = bondable1.getMaxDist();
    Unsigned dist2 = bondable2.getMaxDist();
    return (WindowServices.Radius) ((dist1 > dist2) ? dist1 : dist2);
  }


  Status attach(C2D coord, Index index, C2D coordOther, Index indexOther) {
    IBondable& bondable1 = (IBondable&) ew[coord];
    return bondable1.getBond(index).attach(coord, index, coordOther, indexOther);
  }

  Status attach(SiteNum site, Index index, SiteNum siteOther, Index indexOther) {
    IBondable& bondable1 = (IBondable&) ew[site];
    return bondable1.getBond(index).attach(site, index, siteOther, indexOther);
  }


  Status attachForce(SiteNum site1, Index index1, SiteNum site2, Index index2) {
    IBondable& bondable1 = (IBondable&) ew[site1];
    IBondable& bondable2 = (IBondable&) ew[site2];

    QBond& bond1 = bondable1.getBond(index1);
    QBond& bond2 = bondable2.getBond(index2);
    Bool isAttached1 = bond1.isAttached();
    Bool isAttached2 = bond2.isAttached();

    if (!isAttached1 && !isAttached2)
      return attach(site1, index1, site2, index2);

    SiteNum siteOther1 = bond1.getSiteNumber(site1);
    Index indexOther1 = bond1.getIndex();
    if (isAttached1 && !ew.isAccessible(siteOther1))
      return BS.cINACCESSIBLE;

    SiteNum siteOther2 = bond2.getSiteNumber(site2);
    Index indexOther2 = bond2.getIndex();
    if (isAttached2 && !ew.isAccessible(siteOther2))
      return BS.cINACCESSIBLE;

    // Detach
    Status status = bond1.detach(site1);
    if (bs.isOk(status))
      status = bond2.detach(site2);

    // Attach
    if (bs.isOk(status))
      status = bond1.attach(site1, index1, site2, index2);

    if (!bs.isOk(status)) {
      // Try and restore the bonds
      bond1.detach(site1);
      bond2.detach(site2);
      if (isAttached1 && !bs.isOk(bond1.attach(site1, index1, siteOther1, indexOther1)))
        fail("BondUtils.attachForce: failed to re-attach 1st bond");
      if (isAttached2 && !bs.isOk(bond2.attach(site2, index2, siteOther2, indexOther2)))
        fail("BondUtils.attachForce: failed to re-attach 2nd bond");
    }
    return status;
  }


  Status detach(C2D coord, Index index) {
    IBondable& bondable = (IBondable&) ew[coord];
    return bondable.getBond(index).detach(coord);
  }

  Status detach(SiteNum site, Index index) {
    IBondable& bondable = (IBondable&) ew[site];
    return bondable.getBond(index).detach(site);
  }


  Status traverse(C2D coord, Index index, Index indexNext) {
    // attach to bond with same index as in current item
    return traverse(coord, index, indexNext, QBond.Num.maxof);
  }

  Status traverse(C2D coord, Index index, Index indexNext, QBond.Num indexBond) {
    SiteNum site = ew.getSiteNumberRaw(coord);
    return traverse(site, index, indexNext, indexBond);
  }

  Status traverse(SiteNum site, Index index, Index indexNext) {
    // attach to bond with same index as in current item
    return traverse(site, index, indexNext, QBond.Num.maxof);
  }

  Status traverse(SiteNum site, Index index, Index indexNext, QBond.Num indexBond) {
    // Object
    IBondable& obj = (IBondable&) ew[site];
    QBond& bondCurrent = obj.getBond(index);
    if (!bondCurrent.isAttached())
      return BS.cNOT_ATTACHED;
    SiteNum siteCurrent = bondCurrent.getSiteNumber();
    if (!ew.isAccessible(siteCurrent))
      return BS.cINACCESSIBLE;
    IBondable& current = (IBondable&) ew[siteCurrent];

    // Current item
    QBond& bondNext = current.getBond(indexNext);
    if (!bondNext.isAttached())
      return BS.cNO_NEXT;
    SiteNum siteNext = bondNext.getSiteNumber(siteCurrent);
    if (!ew.isAccessible(siteNext))
      return BS.cINACCESSIBLE;

    Index indexCurrent = bondCurrent.getIndex(); // remember current index in case we need to reattach
    if (indexBond > QBond.Index.maxof)
      indexBond = indexCurrent; // attach to bond with same index as in current item

    Status status = BS.cOK;

    // Detach
    status = bondCurrent.detach(site);
    if (!bs.isOk(status))
      return status;

    // Attach
    status = bondCurrent.attach(site, index, siteNext, (QBond.Index) indexBond);
    if (!bs.isOk(status)) {
      // try to re-attach
      if (!bs.isOk(bondCurrent.attach(site, index, siteCurrent, indexCurrent)))
        fail("BondUtils.traverse: failed to re-attach");
    }
    return status;
  }


  Status replace(C2D coord, Index index, C2D subCoord, Index subIndex) {
    SiteNum site = ew.getSiteNumberRaw(coord);
    SiteNum subSite = ew.getSiteNumberRaw(subCoord);
    return replace(site, index, subSite, subIndex);
  }

  Status replace(SiteNum site, Index index, SiteNum subSite, Index subIndex) {
    // Object whose attachment we're replacing
    IBondable& obj = (IBondable&) ew[site];
    QBond& objBond = obj.getBond(index);

    // Attachment
    Bool isAttached = objBond.isAttached(); // is there anything to replace?
    SiteNum attachmentSite = objBond.getSiteNumber(); // remember in case we need to re-attach
    Index attachmentIndex = objBond.getIndex();       // +
    if (isAttached && !ew.isAccessible(attachmentSite))
      return BS.cINACCESSIBLE;

    // Substitute
    IBondable& sub = (IBondable&) ew[subSite];
    QBond& subBond = sub.getBond(subIndex);
    if (subBond.isAttached())
      return BS.cIS_ATTACHED; // substitute is already attached to something with same bond

    Status status = BS.cOK;

    // Detach
    if (isAttached) {
      status = objBond.detach(site);
      if (!bs.isOk(status))
        return status;
    }

    // Attach the substitute
    status = objBond.attach(site, index, subSite, subIndex);
    if (!bs.isOk(status)) {
      if (isAttached) {
        // re-attach
        if (!bs.isOk(objBond.attach(site, index, attachmentSite, attachmentIndex)))
          fail("BondUtils.replace: failed to re-attach"); // shouldn't happen
      }
    }
    return status;
  }


  Status move(C2D coord, Index index, C2D coordTo, Index indexTo) {
    SiteNum site = ew.getSiteNumberRaw(coord);
    SiteNum siteTo = ew.getSiteNumberRaw(coordTo);
    return move(site, index, siteTo, indexTo);
  }


  Status move(SiteNum site, Index index, SiteNum siteTo, Index indexTo) {
    // Object to move
    IBondable& obj = (IBondable&) ew[site];
    QBond& objBond = obj.getBond(index);

    // Target
    IBondable& to = (IBondable&) ew[siteTo];
    QBond& toBond = to.getBond(indexTo);
    if (toBond.isAttached())
      return BS.cOTHER_IS_ATTACHED;

    // What's the object's bond attached to currently?
    Bool isAttached = objBond.isAttached();
    SiteNum currentSite = objBond.getSiteNumber(site); // remember in case we need to re-attach
    Index currentIndex = objBond.getIndex();           // +
    if (isAttached && !ew.isAccessible(currentSite))
      return BS.cINACCESSIBLE;

    Status status = BS.cOK;

    // Detach
    if (isAttached) {
      status = objBond.detach(site);
      if (!bs.isOk(status))
        return status;
    }

    // Attach to target
    status = objBond.attach(site, index, siteTo, indexTo);
    if (!bs.isOk(status)) {
      if (isAttached) {
        // re-attach
        if (!bs.isOk(objBond.attach(site, index, currentSite, currentIndex)))
          fail("BondUtils.move: failed to re-attach"); // shouldn't happen
      }
    }
    return status;
  }


  Status swap(C2D coord, Index index1, Index index2) {
    SiteNum site = ew.getSiteNumberRaw(coord);
    return swap(site, index1, index2);
  }


  /**
     Given bondable and two bond indexes, swap attached atoms between bonds
   */
  Status swap(SiteNum site, Index index1, Index index2) {
    if (index1 == index2)
      return BS.cOK;

    IBondable& obj = (IBondable&) ew[site];

    QBond& bond1 = obj.getBond(index1);
    QBond& bond2 = obj.getBond(index2);
    Bool isAttached1 = bond1.isAttached();
    Bool isAttached2 = bond2.isAttached();

    // Check if both bonds are not attached
    if (!isAttached1 && !isAttached2)
      return BS.cOK;

    SiteNum siteOther1 = bond1.getSiteNumber(site);
    Index indexOther1 = bond1.getIndex();
    if (isAttached1 && !ew.isAccessible(siteOther1))
      return BS.cINACCESSIBLE;

    SiteNum siteOther2 = bond2.getSiteNumber(site);
    Index indexOther2 = bond2.getIndex();
    if (isAttached2 && !ew.isAccessible(siteOther2))
      return BS.cINACCESSIBLE;

    // Detach
    Status status = bond1.detach(site);
    if (bs.isOk(status))
      status = bond2.detach(site);

    // Attach
    if (bs.isOk(status) && isAttached2)
      status = bond1.attach(site, index1, siteOther2, indexOther2);
    if (bs.isOk(status) && isAttached1)
      status = bond2.attach(site, index2, siteOther1, indexOther1);

    if (!bs.isOk(status)) {
      // Try and restore the bonds
      bond1.detach(site);
      bond2.detach(site);
      if (isAttached1 && !bs.isOk(bond1.attach(site, index1, siteOther1, indexOther1)))
        fail("BondUtils.swap: failed to re-attach 1st bond");
      if (isAttached2 && !bs.isOk(bond2.attach(site, index2, siteOther2, indexOther2)))
        fail("BondUtils.swap: failed to re-attach 2nd bond");
    }
    return status;
  }
}
