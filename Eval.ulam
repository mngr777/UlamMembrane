transient Eval {
  typedef EventWindow.SiteNum SiteNum;
  typedef WindowServices.Radius Radius;

  typedef QBond.Index Index;
  typedef Exec.RegIndex RegIndex;

  typedef DataUtils.Datum Datum;
  typedef DataUtils.Byte Byte;
  typedef DataUtils.Integer Integer;

  typedef PackageData.Arity Arity;
  typedef PackageData.Symbol Symbol;

  typedef STypeUtils.SType SType;

  constant Bool cDEBUG = Exec.cDEBUG;

  constant RegIndex cREG1 = Exec.cREG1;
  constant RegIndex cREG2 = Exec.cREG2;
  constant RegIndex cSRC  = Exec.cSRC;
  constant RegIndex cDST  = Exec.cDST;

  BondStatus bs;
  BondUtils bu;
  DataUtils du;
  DebugUtils dbg;
  EventWindow ew;
  ExecDebug ed;
  PackageData pd;
  STypeUtils stu;

  SType toSType(Byte value) {
    // TODO; sanity check
    return (SType) value;
  }

  SType getSType(Exec& exec, RegIndex regIndex) {
    return toSType(exec.get(regIndex));
  }

  SiteNum toSiteNumber(Byte value) {
    // TODO: sanity check
    return (SiteNum) value;
  }

  SiteNum getSiteNumber(Exec& exec, RegIndex regIndex) {
    return toSiteNumber(exec.get(regIndex));
  }

  Index toBondIndex(Byte value) {
    Integer index = du.toInteger(value);
    checkBondIndex(index);
    return (Index) index;
  }

  Index getBondIndex(Exec& exec, RegIndex regIndex) {
    Integer index = exec.getInteger(regIndex);
    checkBondIndex(index);
    return (Index) index;
  }

  Void checkBondIndex(Integer index) {
    if (0 > index || index > Index.maxof) {
      DebugUtils dbg;
      dbg.print("Invalid bond index:");
      dbg.print(index);
    }
  }
}
