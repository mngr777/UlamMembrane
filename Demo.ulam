local typedef BondStatus BS;
local typedef EventWindow.SiteNum SiteNum;
local typedef PackageData PD;
local typedef STypeUtils STU;

element Demo : QStateT(3) + QBondableT(2) + QMortal {
  constant State cSTATE_PLACE_MEMBRANE_BUILDER = 0;
  constant State cSTATE_BUILD_SEQUENCE         = 1;
  constant State cSTATE_ATTACH_FIRST           = 2;
  constant State cSTATE_COMPLETE               = 3;

  Unsigned mCount = 0;

  @Override Void behave() {
    if (isState(cSTATE_PLACE_MEMBRANE_BUILDER)) {
      placeMembraneBuilder();
    } else if (isState(cSTATE_BUILD_SEQUENCE)) {
      buildSequence();
    } else if (isState(cSTATE_ATTACH_FIRST)) {
      attachFirst();
    } else if (isState(cSTATE_COMPLETE)) {
      complete();
    } else if (isState(cSTATE_DONE)) {
      die();
    }
  }

  Void placeMembraneBuilder() {
    EventWindow ew;

    Demo_MembraneBuilder builder;
    ew[1] = builder;

    setState(cSTATE_BUILD_SEQUENCE);
  }

  Void buildSequence() {
    Demo_SequenceData data;

    SequenceBuilder builder;
    if (builder.buildNext(self, 0, data.getData(mCount), data.getAux(mCount)))
      mCount++;

    if (mCount == 2u && !getBond(1).isAttached()) {
      // Attach to first item, so we can close the ring later
      setState(cSTATE_ATTACH_FIRST);

    } else if (mCount >= data.cSIZE) {
      setState(cSTATE_COMPLETE);
    }
  }

  Void attachFirst() {
    BondStatus bs;
    BondUtils bu;
    EventWindow ew;

    QBond& bond = getBond(0);
    SiteNum secondSite = bond.getSiteNumber();
    Package& second = (Package&) ew[secondSite];

    QBond& prevBond = second.getBond(Package.cPREV);
    SiteNum firstSite = prevBond.getSiteNumber(secondSite);

    // Attach to bond 1
    if (bs.isOk(bu.attach(0, 1, firstSite, Package.cCOMMON)))
      setState(cSTATE_BUILD_SEQUENCE); // continue building sequence
  }

  Void complete() {
    BondStatus bs;
    BondUtils bu;

    SiteNum siteFirst = getBond(1).getSiteNumber();
    SiteNum siteLast = getBond(0).getSiteNumber();

    if (bs.isOk(bu.attach(siteFirst, Package.cPREV, siteLast, Package.cNEXT)))
      setState(cSTATE_DONE);
  }
}

local typedef QBondableT(1) QBondable1;

/**
   \symbol DM
 */
element Demo_MembraneBuilder : QStateT(3) + QBondableT(1) + QDiffusableT(100) + QMortal {
  typedef C2D.Dir Dir;

  constant Unsigned(5) cSIDE_LENGTH = 16;
  constant Unsigned(2) cSTEP_LENGTH = 2;

  constant State cSTATE_MOVE_OUT       = 0;
  constant State cSTATE_BUILD          = 1;
  constant State cSTATE_ANCHOR         = 2;
  constant State cSTATE_TRAVERSE       = 3;
  constant State cSTATE_FORWARD        = 4;
  constant State cSTATE_CLOSE          = 5;
  constant State cSTATE_REMOVE_ANCHORS = 6;

  Dir mDir = 0; // South
  Unsigned(5) mCount = 0;
  Unsigned(2) mMoveCount = 0;

  @Override Void behave() {
    if (isState(cSTATE_MOVE_OUT)) {
      moveOut();
    } else if (isState(cSTATE_BUILD)) {
      build();
    } else if (isState(cSTATE_ANCHOR)) {
      anchor();
    } else if (isState(cSTATE_TRAVERSE)) {
      traverse();
    } else if (isState(cSTATE_FORWARD)) {
      forward();
    } else if (isState(cSTATE_CLOSE)) {
      close();
    } else if (isState(cSTATE_REMOVE_ANCHORS)) {
      removeAnchors();
      diffuse();
    } else if (isState(cSTATE_DONE)) {
      die();
    }
  }

  Void moveOut() {
    // NOTE: cannot do checks after swapping
    if (mCount >= cSIDE_LENGTH * cSTEP_LENGTH / 2) {
      mCount = 0;
      setState(cSTATE_BUILD);
      return;
    }

    EventWindow ew;
    SwapHelper sh;
    C2D origin;
    C2D coord = origin.neighbor(5); // North-West
    if (ew.isEmpty(coord)) {
      mCount++; // increment _before_ swapping
      if (!sh.swap(origin, coord))
        mCount--;
    }
  }

  Void build() {
    BondStatus bs;
    BondUtils bu;
    EventWindow ew;
    EventWindowMisc ewm;

    // Build
    SiteNum site = ewm.findEmptySite(1, 2);
    if (site == SiteNum.maxof)
      return;
    Membrane membrane;
    ew[site] = membrane;

    BS.Status status = BS.cOK;
    QBond& bond = getBond(0);
    if (!bond.isAttached()) {
      // First membrane atom, attach to self
      status = bu.attach(0, 0, site, Membrane.cCOMMON);
    } else {
      // Attach to previous membrane atom
      status = bu.attach(bond.getSiteNumber(), Membrane.cNEXT, site, Membrane.cPREV);
    }

    if (bs.isOk(status)) {
      setState(cSTATE_ANCHOR);

    } else {
      Empty empty;
      ew[site] = empty;
      return;
    }
  }

  Void anchor() {
    BondStatus bs;
    BondUtils bu;
    CoordUtils cu;
    EventWindow ew;
    EventWindowMisc ewm;

    QBond& bond = getBond(0);
    SiteNum membraneSite = bond.getSiteNumber();
    Membrane& membrane = (Membrane&) ew[membraneSite];
    QBond& otherBond = membrane.getBond(Membrane.cOTHER);

    if (mCount > 0 || otherBond.isAttached()) {
      setState(cSTATE_TRAVERSE);
      return;
    }

    // Build anchor
    C2D coord = ew.getCoordRaw(getForwardSite());
    coord = cu.rotateLeft(coord);
    SiteNum site = ew.getSiteNumberRaw(-coord);
    if (!ew.isEmpty(site))
      return;
    Anchor anchor;
    ew[site] = anchor;

    // Attach to membrane
    BS.Status status = bu.attach(site, 0, membraneSite, Membrane.cOTHER);
    if (!bs.isOk(status)) {
      Empty empty;
      ew[site] = empty;
      return;
    }
  }

  Void traverse() {
    BondStatus bs;
    BondUtils bu;
    EventWindow ew;

    BS.Status status = bu.traverse(0, 0, Membrane.cNEXT);
    if (bs.isOk(status) || status == BS.cNO_NEXT)
      setState(cSTATE_FORWARD);
  }

  Void forward() {
    // NOTE: cannot do checks after swapping
    if (mMoveCount >= cSTEP_LENGTH) {
      mMoveCount = 0;
      mCount++;
      if (mCount >= cSIDE_LENGTH) {
        // Side finished, move to next side
        mCount = 0;
        mDir = getNextDir();
        if (mDir == 0) {
          // Last side finished, close the membrane
          setState(cSTATE_CLOSE);
          return;
        }
      }
      setState(cSTATE_BUILD);
      return;
    }

    EventWindow ew;
    SwapHelper sh;

    SiteNum forwardSite = getForwardSite();
    if (ew.isEmpty(forwardSite)) {
      mMoveCount++; // increment _before_ swapping
      if (!sh.swap(0, forwardSite))
        mMoveCount--;
    }
  }

  Void close() {
    BondStatus bs;
    BondUtils bu;
    EventWindow ew;

    QBond& bond = getBond(0);
    SiteNum prevSite = bond.getSiteNumber();
    SiteNum nextSite = getFirstSite();
    if (nextSite == SiteNum.maxof)
      return;

    BS.Status status = bu.attach(prevSite, Membrane.cNEXT, nextSite, Membrane.cPREV);
    if (bs.isOk(status)) {
      mCount = 0;
      setState(cSTATE_REMOVE_ANCHORS);
    }
  }

  Void removeAnchors() {
    BondUtils bu;
    EventWindow ew;

    // Get membrane
    QBond& bond = getBond(0);
    SiteNum membraneSite = bond.getSiteNumber();
    Membrane& membrane = (Membrane&) ew[membraneSite];

    // Get anchor
    QBond& anchorBond = membrane.getBond(Membrane.cOTHER);
    Bool isAttached = anchorBond.isAttached();
    SiteNum anchorSite = isAttached
      ? anchorBond.getSiteNumber(membraneSite)
      : SiteNum.maxof;

    if (isAttached && !ew.isAccessible(anchorSite))
      return;

    if (!isAttached || !(ew[anchorSite] is Anchor)) {
      // no anchor, move to next membrane atom
      bu.traverse(0, 0, Membrane.cNEXT);
      return;
    }

    // Detach and destroy anchor
    anchorBond.detach(membraneSite);
    Empty empty;
    ew[anchorSite] = empty;
    mCount++;

    // Are all anchors removed?
    if (mCount == 4)
      setState(cSTATE_DONE);
  }

  SiteNum getFirstSite() {
    EventWindow ew;
    MDist mdist;

    for (Int s = 1; s <= mdist.getLastIndex(4); s++) {
      SiteNum site = (SiteNum) s;
      Atom& atom = ew[site];
      if (atom as Membrane)
        if (!atom.getBond(Membrane.cPREV).isAttached())
          return site;
    }
    return SiteNum.maxof;
  }

  Dir getNextDir() {
    return (Dir) (((Int) mDir + 2) % 8);
  }

  SiteNum getForwardSite() {
    EventWindow ew;
    C2D origin;
    return ew.getSiteNumber(origin.neighbor(mDir));
  }

  @Override Void renderGraphics() {
    self.QBondable1.renderGraphics();

    Drawable drawable;
    if (!drawable.canDraw())
      return;

    ColorUtils cu;
    C2D start;
    C2D end = start.neighbor(mDir) * (Drawable.cUNITS_PER_SITE * 3 / 4);
    ARGB oncol = cu.color(0x00ffffff);
    ARGB offcol = oncol;
    drawable.drawMaskedLine(start, end, oncol, offcol, 0xffffffff);
  }
}


/**
   Basic crawler example:
   (with-input
     (if-attached
       (widh-dst           ;; Move to "next" if possible, otherwise try "other"
         Membrane.cNEXT,   ; TODO: shorten to (if-not (traverse-3) (traverse-2))
         (if-attached-next
           (traverse-3)
           (traverse-2)))
       (attach-to          ;; Find a membrane to attach to
         STU.cMEMBRANE)))

   # Bootstrap
   (with-input
     (if-attached
     +-(if-matches                ; Is the package we attached to tagged and active?
     |   ES.cTAGGED | ES.cACTIVE
     |   (prog2                   ; 1. then move to next
     |     (traverse-2)
     |     (with-dst-2            ; 2. and attach TreeBuilder to now previous package
     |       (build-next
     |         STU.cTREE_BUILDER
     |         Package.cCOMMON))
     +-(attach-to-flags
         STU.cPACKAGE
         ES.cNO_EXEC)))

   # Build other layer atoms:
    1 (with-input
    2  (if-attached
    3  +-(with-dst-2                    ; "other" membrane bond
    4  |   (if-attached-next
    5  |   +-(with-dst-3                ;; Move to "next" if attached, otherwise try "other"
    6  |   |   (if-attached-next
    7  |   |     (traverse-3)           ; move to "next" membrane atom
    8  |   |     (traverse-2)))         ; move to "other" membrane atom
    9  |   +-(with-output               ;; Attach new membrane atom to "other" bond
   10  |       (prog2
   11  |         (build                 ; build new membrane atom
   12  |           STU.cMEMBRANE        ; membrane stype
   13  |           Membrane.cOTHER)     ; "other" bond
   14  |         (move-to-other
   15  |           Membrane.cOTHER))))) ; attach to input membrane's "other" bond
   16  +-(attach-to                     ;; Find a membrane to attach to
   17      STU.cMEMBRANE)))


   # Repair the membrane:
   1. Next layer atoms are there,        2. Atoms of both layers are attached,
      but not attached to each other:       but one layer has extra atoms in between
                                            because of growth:

   "other" layer ->   o   o                    -o-------o-
                      |   |                     |       |
   current layer ->  -o---o-                   -o---o---o-
                      |                         |
                      @                         @
   18 (with-input
   19   (if-attached
   20   +-(prog2
   21   |   (with-dst-2
   22   |     (if-attached-next                        ; Does current membrane atom have "other"?
   23   |     +-(if
   24   |     | +-(attach-other-to-next)               ; * attach output bond to "other" membrane
   25   |     | +-(with-dst-3
   26   |     |     (if-attached-next                  ;   Is there next membrane atom?
   27   |     |     +-(prog2
   28   |     |     |   (traverse)                     ;   - move to next
   29   |     |     |   (with-dst-2
   30   |     |     |     (if-attached-next            ;     does next atom have "other" attached?
   31   |     |     |     +-(prog2
   32   |     |     |     |   (traverse)               ;     1. move to it
   33   |     |     |     |   (with-dst-1
   34   |     |     |     |     (if-other-matches-next ;     2. is it "next" for output?
   35   |     |     |     |       (noop)               ;        nothing to do then
   36   |     |     |     |       (connect-other-force ;     3. connect membrane prev/next atoms
   37   |     |     |     |         Membrane.cNEXT)))) ;        (break bonds if already bonded)
   38   |     |     |     +-(noop))))
   39   |     |     +-(swap-input-output))))           ;   - no next atom, move to "other" by swapping
   40   |     +-(traverse-3))                          ; * move to next
   41   |   (detach-other))                            ; detach output bond
   42   +-(attach-to                                   ;; Find a membrane to attach to
   43       STU.cMEMBRANE)))
 */
transient Demo_SequenceData {
  typedef DataUtils.Datum Datum;
  typedef DataUtils.Byte Byte;
  typedef ITaggable.Tag Tag;
  typedef PackageData.Arity Arity;
  typedef PackageData.Type Type;
  typedef PackageData.Symbol Symbol;

  typedef EvalBlock EB;
  typedef EvalConditional EC;
  typedef EvalFunction EF;

  typedef Bits(Type.sizeof + Byte.sizeof) Item ;

  constant Item cBLCK = (Item) PD.cTYPE_BLOCK << Byte.sizeof;
  constant Item cFUNC = (Item) PD.cTYPE_FUNCTION << Byte.sizeof;
  constant Item cCOND = (Item) PD.cTYPE_CONDITIONAL << Byte.sizeof;
  constant Item cCNST = (Item) PD.cTYPE_CONSTANT << Byte.sizeof;

  constant Item cACTIVE = (Item) 1 << Byte.sizeof;

  constant Unsigned cSIZE = 43;

  PackageData pd;

  EvalBlock eb;
  EvalConditional ec;
  EvalFunction ef;

  Item items[cSIZE * 2] = {
    /* # Build other layer atoms */
    /*  1 */ cBLCK | EB.cWITH_INPUT, cACTIVE | (Tag) 0x1,
    /*  2   */ cCOND | EC.cIF_ATTACHED, 0,
    /*  3     */ cBLCK | EB.cWITH_DST_2, 0,
    /*  4       */ cCOND | EC.cIF_ATTACHED_NEXT, 0,
    /*  5         */ cBLCK | EB.cWITH_DST_3, 0,
    /*  6           */ cCOND | EC.cIF_ATTACHED_NEXT, 0,
    /*  7             */ cFUNC | EF.cTRAVERSE_3, 0,
    /*  8             */ cFUNC | EF.cTRAVERSE_2, 0,
    /*  9         */ cBLCK | EB.cWITH_OUTPUT, 0,
    /* 10            */ cFUNC | EF.cPROG2, 0,
    /* 11              */ cFUNC | EF.cBUILD, 0,
    /* 12                */ cCNST | (Byte) STU.cMEMBRANE, 0,
    /* 13                */ cCNST | (Byte) Membrane.cOTHER, 0,
    /* 14              */ cFUNC | EF.cMOVE_TO_OTHER, 0,
    /* 15                */ cCNST | (Byte) Membrane.cOTHER, 0,
    /* 16     */ cFUNC | EF.cATTACH_TO, 0,
    /* 17       */ cCNST | STU.cMEMBRANE, 0,
    /* # Repair the membrane */
    /* 18 */ cBLCK | EB.cWITH_INPUT, cACTIVE | (Tag) 0x1,
    /* 19   */ cCOND | EC.cIF_ATTACHED, 0,
    /* 20     */ cFUNC | EF.cPROG2, 0,
    /* 21       */ cBLCK | EB.cWITH_DST_2, 0,
    /* 22         */ cCOND | EC.cIF_ATTACHED_NEXT, 0,
    /* 23           */ cCOND | EC.cIF, 0,
    /* 24             */ cFUNC | EF.cATTACH_OTHER_TO_NEXT, 0,
    /* 25             */ cBLCK | EB.cWITH_DST_3, 0,
    /* 26               */ cCOND | EC.cIF_ATTACHED_NEXT, 0,
    /* 27                 */ cFUNC | EF.cPROG2, 0,
    /* 28                   */ cFUNC | EF.cTRAVERSE, 0,
    /* 29                   */ cBLCK | EB.cWITH_DST_2, 0,
    /* 30                     */ cCOND | EC.cIF_ATTACHED_NEXT, 0,
    /* 31                       */ cFUNC | EF.cPROG2, 0,
    /* 32                         */ cFUNC | EF.cTRAVERSE, 0,
    /* 33                         */ cBLCK | EB.cWITH_DST_1, 0,
    /* 34                           */ cCOND | EC.cIF_OTHER_MATCHES_NEXT, 0,
    /* 35                             */ cFUNC | EF.cNOOP, 0,
    /* 36                             */ cFUNC | EF.cCONNECT_OTHER_FORCE, 0,
    /* 37                               */ cCNST | (Byte) Membrane.cNEXT, 0,
    /* 38                       */ cFUNC | EF.cNOOP, 0,
    /* 39                 */ cFUNC | EF.cSWAP_INPUT_OUTPUT, 0,
    /* 40           */ cFUNC | EF.cTRAVERSE_3, 0,
    /* 41       */ cFUNC | EF.cDETACH_OTHER, 0,
    /* 42   */ cFUNC | EF.cATTACH_TO, 0,
    /* 43     */ cCNST | (Byte) STU.cMEMBRANE, 0
  };

  Datum getData(Unsigned i) {
    Item item = items[i * 2u];

    Type type = (Type) (item >> Byte.sizeof);
    Byte value = (Byte) item;
    Arity arity = getArity(type, (Symbol) value);

    // DebugUtils dbg;
    // dbg.print("sequence item (num/arity):");
    // dbg.print(i + 1u);
    // dbg.print(arity);

    Datum data = PD.cNO_DATA;
    data = pd.setArity(data, arity);
    data = pd.setType(data, type);
    data = pd.setValue(data, value);
    return data;
  }

  Datum getAux(Unsigned i) {
    Item item = items[i * 2u + 1u];

    Tag tag = (Tag) item;
    Bool isActive = (item & cACTIVE) != 0x0;

    Datum data = PD.cNO_DATA;
    if (tag != 0x0) {
      data = pd.setTag(data, tag);
      data = pd.setIsActive(data, isActive);
    }
    return data;
  }

  Arity getArity(Type type, Symbol symbol) {
    Arity arity = 0;
    if (type == PD.cTYPE_BLOCK) {
      arity = eb.getArity(symbol);
    } else if (type == PD.cTYPE_CONDITIONAL) {
      arity = ec.getArity(symbol);
    } else if (type == PD.cTYPE_FUNCTION) {
      arity = ef.getArity(symbol);
    }
    return arity;
  }
}
